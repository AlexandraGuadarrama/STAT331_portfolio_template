---
title: "STAT 331 Portfolio"
author: "Alexa Guadarrama"
format: html 
embed-resources: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be a B.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` Example 1

```{r}
#| label: wd-1-csv-1
# Lab 4, Question 0

teacher_evals <- read_csv(here("Week 3","Lab 3","teacher_evals.csv"))
```

-   `csv` Example 2

```{r}
#| label: wd-1-csv-2
# Lab 3, Question 2

childcare_costs <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-09/childcare_costs.csv') 

counties <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-09/counties.csv')

tax_rev <- read_csv('https://atheobold.github.io/groupworthy-data-science/labs/instructions/data/ca_tax_revenue.csv')
```

-   `xlsx`

```{r}
#| label: wd-1-xlsx
# Practice Activity 4

library(readxl)
military_spend <- read_xlsx("gov_spending_per_capita.xlsx",
                      sheet = "Share of Govt. spending" ,
                      skip  = 7,
                      n_max = 191,
                      na = c("xxx", ". .", "..")
                      )
  head(military_spend)
```

**WD-2: I can select necessary columns from a dataset.**

-   Example selecting specified columns

```{r}
#| label: wd-2-ex-1
# Challenge 4, Question 2

county_data <- ca_childcare |> 
  filter(county_name %in% c("Los Angeles County", "Orange County", "San Diego County")) |> 
  select(county_name, study_year, mc_infant, mc_toddler, mc_preschool, mfcc_infant, mfcc_toddler, mfcc_preschool) |>
  pivot_longer(cols = starts_with(c("mc_","mfcc_")),
               names_to = c("provider_type", "age_group"),
               names_sep = "_",
               values_to = "median_weekly_cost")

```

-   Example removing specified columns

```{r}
#| label: wd-2-ex-2

```

-   Example selecting columns based on logical values (e.g., `starts_with()`, `ends_with()`, `contains()`, `where()`)

```{r}
#| label: wd-2-ex-3
# Challenge 4, Question 2
county_data <- ca_childcare |> 
  filter(county_name %in% c("Los Angeles County", "Orange County", "San Diego County")) |> 
  select(county_name, study_year, mc_infant, mc_toddler, mc_preschool, mfcc_infant, mfcc_toddler, mfcc_preschool) |>
  pivot_longer(cols = starts_with(c("mc_","mfcc_")),
               names_to = c("provider_type", "age_group"),
               names_sep = "_",
               values_to = "median_weekly_cost")

```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-3-numeric-ex-1
#Lab 3, Question 5
teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  filter(no_participants > 10) |>
  mutate(teacher_id = as.character(teacher_id),
         course_id = as.character(course_id)) |>
  select(course_id, teacher_id, question_no, no_participants, resp_share, SET_score_avg, percent_failed_cur, academic_degree, seniority, sex)

```

-   Numeric Example 2

```{r}
#| label: wd-3-numeric-ex-2
#Lab 4, Question 6
ca_childcare |> 
  filter(study_year == 2018) |>
  group_by(region) |>
  summarize(median_weekly_price = median(mc_infant)) |>
  arrange(desc(median_weekly_price)) |>
  slice_tail()

```

-   Character Example 1 (any context)

```{r}
#| label: wd-3-character
# Lab 5
 filter(event_name == "SQL Symphony Concert",
         month (attend_date) == 12,
         year(attend_date) == 2017,
         height %in% 65:67,
         hair_color == "red",
         car_make == "Tesla",
         car_model == "Model S")
```

-   Character Example 2 (example must use functions from **stringr**)

```{r}
#| label: wd-3-string
# Lab 5
person |>
  inner_join(interview, join_by("id" == "person_id")) |>
  filter(address_street_name == "Franklin Ave",
         str_detect(name, "Annabel")) |>
  select(id, name, transcript)|>
  pull(name)
```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date
# Lab 5
potential_suspect <- person |>
  left_join(drivers_license, join_by(license_id == id)) |>
  left_join(income, join_by("ssn")) |>
  left_join(facebook_event_checkin, join_by(id == person_id)) |>
  mutate(attend_date = ymd(date)) |>
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-4-numeric-ex-1
# Challenge 3, Question 1

teacher_evals_compare <- teacher_evals |>
  filter(question_no == 903 ) |>
  mutate(SET_level = if_else(SET_score_avg >= 4, 
                             "excellent", 
                             "standard"),
			   sen_level = case_when(seniority <= 4 ~"junior",
			                         seniority >= 5 & seniority <=8 ~ "senior",
			                         seniority > 8 ~ "very senior") ) |>
  select(course_id, SET_level, sen_level)
```

-   Numeric Example 2

```{r}
#| label: wd-4-numeric-ex-2

```

-   Factor Example 1 (renaming levels)

```{r}
#| label: wd-4-factor-ex-1
#Lab 4, Question 4
ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County")) |>
  mutate(region = fct_collapse(county_name,
      "Superior California" = superior_counties,
      "North Coast" = north_coast_counties,
      "San Francisco Bay Area" = san_fran_counties,
      "Northern San Joaquin Valley" = n_san_joaquin_counties,
      "Central Coast" = central_coast_counties,
      "Southern San Joaquin Valley" = s_san_joaquin_counties,
      "Inland Empire" = inland_counties,
      "Los Angeles County" = la_county,
      "Orange County" = orange_county,
      "San Diego–Imperial" = san_diego_imperial_counties))
```

-   Factor Example 2 (reordering levels)

```{r}
#| label: wd-4-factor-ex-2
#Lab 4, Question 7
# Growing comment: Nice work reordering the facets, but we learned new tools this week that we can use instead. 
# Specifically, the forcats package has some functions to handle this!

plot_ca_childcare <- ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  pivot_longer(cols = starts_with("mc_"),
               names_to = "age_group", 
              values_to = "median_price") |>
  mutate(age_group = fct_relevel(fct_recode(age_group,
                                            "Infant" = "mc_infant",
                                            "Toddler" = "mc_toddler",
                                            "Preschool" = "mc_preschool"),
                                 "Infant",
                                 "Toddler",
                                 "Preschool"),
         region = fct_relevel(region,
           "San Francisco Bay Area",
           "Orange County",
           "Los Angeles County",
           "Northern San Joaquin Valley",
           "Central Coast",
           "Inland Empire",
           "Superior California",
           "Southern San Joaquin Valley",
           "San Diego–Imperial",
           "North Coast"))

```

-   Character (example must use functions from **stringr**)

```{r}
#| label: wd-4-string

```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date
# Lab 5
potential_suspect <- person |>
  left_join(drivers_license, join_by(license_id == id)) |>
  left_join(income, join_by("ssn")) |>
  left_join(facebook_event_checkin, join_by(id == person_id)
  ) |>
  mutate(attend_date = ymd(date)
  ) |>
  filter(event_name == "SQL Symphony Concert",
         month (attend_date) == 12,
         year(attend_date) == 2017,
         height %in% 65:67,
         hair_color == "red",
         car_make == "Tesla",
         car_model == "Model S") |>
  distinct(name, .keep_all = TRUE) |>
  select(name, id, hair_color, height, gender, car_make, car_model, annual_income, event_name, attend_date) 
glimpse(potential_suspect)
```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()` Example 1

```{r}
#| label: wd-5-left-ex-1
# Lab 5
# Portfolio revision: This would keep all potential_suspect rows 
# and add interview data where there's a match
final_suspect <- potential_suspect |>
  left_join(interview, join_by(id == person_id)) |>
  distinct(name, .keep_all = TRUE) |>
  pull(name)
```

-   `right_join()` Example 1

```{r}
#| label: wd-5-right
# Lab 5 
# Code from the left join
# Portfolio revision: This would keep all interview rows and add potential_suspect data where there's a match
final_suspect <- potential_suspect |>
  right_join(interview, join_by(id == person_id)) |>
  distinct(name, .keep_all = TRUE) |>
  pull(name)
```

-   `left_join()` **or** `right_join()` Example 2

```{r}
#| label: wd-5-left-right-ex-2
#Lab 5
suspect_interview <- suspect |>
  left_join(interview, join_by(person_id))
glimpse(suspect_interview)
```

-   `inner_join()` Example 1

```{r}
#| label: wd-5-inner-ex-1
# Lab 5
person |>
  inner_join(interview, join_by("id" == "person_id")) |>
  filter(address_street_name =="Northwestern Dr") |> 
  arrange(desc(address_number)) |> 
  slice_head(n=1) |>
  select(id, name, transcript) |>
  pull(name)
```

-   `inner_join()` Example 2

```{r}
#| label: wd-5-inner-ex-2
# Lab 5
initial_suspects <- get_fit_now_member |>
  inner_join(get_fit_now_check_in, join_by(id == membership_id)) |>  
  filter(check_in_date == "20180109", membership_status == "gold",
         str_detect(id, "48Z")) |>
  left_join(person, by = join_by(person_id == id) ) |>  
  left_join(drivers_license, by = join_by(license_id == id))    

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi

```

-   `anti_join()`

```{r}
#| label: wd-6-anti

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long
# Lab 4, Question 7
plot_ca_childcare <- ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  pivot_longer(cols = starts_with("mc_"),
               names_to = "age_group", 
              values_to = "median_price") |>
```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide
# Lab 4, Question 5
# Comments: I would recommend using the %in% operator instead of the or!
# Notice that your table still has a grouping variable! 
# Because you grouped by **two** variables, your first group was not dropped!
# Can you give your column names better titles, 
# so the reader knows what "2008" and "2018" represent? 
# What are the values stored in these columns?

#Revision: added an income_ prefix to add data context

ca_childcare |> 
  filter(study_year %in% c(2008,2018)) |>
  group_by(region, study_year) |>
  summarize(median_household_income = median(mhi_2018), .groups = "drop")  |> 
  pivot_wider(names_from = study_year, 
              values_from = median_household_income,
              names_prefix = "income_")|>
  arrange(desc(2018))
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

The following assignments satisfy the above criteria:

-   I used examples from Lab 3 and Lab 4

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1
# Lab 4, Question 7

plot_ca_childcare|>
  ggplot(mapping = aes(x = study_year,
                       y = median_price,
                       color = region)) +
  geom_point(size = .5)+
  geom_smooth(method = "loess", 
              se = TRUE, 
              linewidth = 0.6,
              alpha = 0.4)+
  scale_color_manual(values = colors)+
  facet_wrap(~ age_group)+
  scale_x_continuous(breaks = seq(2008,2018, by = 2))+
  scale_y_continuous(limits = c(100,500))+
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = NULL,
       color = "California Region")
```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2
# Lab 4, Question 5
# Comments: I would recommend using the %in% operator instead of the or!
# Notice that your table still has a grouping variable! 
# Because you grouped by **two** variables, your first group was not dropped!
# Can you give your column names better titles, 
# so the reader knows what "2008" and "2018" represent? 
# What are the values stored in these columns?

ca_childcare |> 
  filter(study_year %in% c(2008,2018)) |>
  group_by(region, study_year) |>
  summarize(median_household_income = median(mhi_2018), .groups = "drop")  |> 
  pivot_wider(names_from = study_year, 
              values_from = median_household_income,
              names_prefix = "income_")|>
  arrange(desc(2018))
```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example (any context)

```{r}
#| label: r-3-example
# Lab 3, Question 11
# Comment: Do you need to save an object here? 
# All I want is to see the output...

# Revision: removed object and added a pipe

rate_my_prof <- teacher_evals_clean |>
  filter(seniority == 1) |>
  group_by(teacher_id) |>
  summarize(avg_course_fail = mean(percent_failed_cur, na.rm = TRUE),
            courses_taught = n_distinct(course_id), .groups = "drop") |>
  filter(avg_course_fail == min(avg_course_fail) | avg_course_fail == max(avg_course_fail))
```

-   Example (function stops)

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   At least two numeric variables

```{r}
#| label: dvs-1-num
# Lab 4, Question 8 
# Comment: Wouldn’t it be nice to add $ signs to the y-axis too???

ggplot(ca_childcare, 
       mapping = aes(x = mhi_2018, 
                     y = mc_infant)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(x = "Median Household Income", 
       y = "Median Weekly Pricing ($)",
       title = "Relationship Between Median Income and Infant Childcare Costs") +
  scale_x_continuous(labels = label_currency(prefix="$")) +
  scale_y_continuous(labels = label_currency(prefix="$")) +
  theme_bw()
```

-   At least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat
# Lab 2, Question 8
ggplot(data = surveys,
       mapping = aes(x = species,
                     y = weight)) +
  geom_jitter(color= "yellow4", alpha=0.5)+
  geom_boxplot(outliers = FALSE)+
  labs(x = "Animal Species", 
       y = "Weight (g)",
       title = "Distribution of Weight Across Animal Species",
       ) +
  theme(axis.text.x = element_text(angle=45))

```

-   At least two categorical variables

```{r}
#| label: dvs-2-cat

```

-   Dates (time series plot)

```{r}
#| label: dvs-2-date
# Lab 4, Question 6

plot_ca_childcare|>
  ggplot(mapping = aes(x = study_year,
                       y = median_price,
                       color = region)) +
  geom_point(size = .5)+
  geom_smooth(method = "loess", 
              se = TRUE, 
              linewidth = 0.6,
              alpha = 0.4)+
  scale_color_manual(values = colors)+
  facet_wrap(~ age_group)+
  scale_x_continuous(breaks = seq(2008,2018, by = 2))+
  scale_y_continuous(limits = c(100,500))+
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = NULL,
       color = "California Region")
```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can modify my plot theme to be more readable

```{r}
#| label: dvs-2-ex-1
# Lab 4, Question 7
# Comments: Nice work reordering the facets, but we learned new tools this week that we can use instead. 
# Specifically, the forcats package has some functions to handle this!
# Can you reorder the colors in the legend so they appear in the same order as the lines in the plot? 
# I am specifically looking for a tool that does the reordering for you, 
# since doing the reordering by hand is not a robust programming practice!
# Nice work changing the size of the x-axis text! 
# Can you make this change to other aspects of the plot?
# Can you match my colors??? These are coming from a package 
# and you will need to expand the color palette to get all 10 colors.

plot_ca_childcare|>
  ggplot(mapping = aes(x = study_year,
                       y = median_price,
                       color = region)) +
  geom_point(size = .5)+
  geom_smooth(method = "loess", 
              se = TRUE, 
              linewidth = 0.6,
              alpha = 0.4)+
  scale_color_manual(values = colors)+
  facet_wrap(~ age_group)+
  scale_x_continuous(breaks = seq(2008,2018, by = 2))+
  scale_y_continuous(limits = c(100,500))+
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = NULL,
       color = "California Region")+
  theme_bw()+
  theme(aspect.ratio = 1,
        axis.text.x = element_text(size = 5),
        axis.text.y = element_text(size = 6),
        axis.title.x = element_text(vjust = .4),
        legend.key.size = unit(.35, units="cm"),
        legend.title = element_text(size = 9),
        legend.text = element_text(size = 8)
        )
```

-   I can modify my colors to be accessible to anyone's eyes

```{r}
#| label: dvs-2-ex-2
# Lab 2 Challenge, Medium
# I'd encourage using R packages to access color palettes for groups larger than four, 
# since it gets hard to create colors that are easily differentiable. Plus, it is less work. :)

# Revision: I manually created colors originally, but to make it more color friendly
# I used a template the viridis R package instead

ggplot(data = surveys, 
       mapping = aes(x = species, 
                     y = weight, 
                     color = sex)) + 
  geom_jitter(alpha = .5, size = .3) + 
  geom_boxplot(outliers = FALSE) + 
  scale_color_viridis_d(option = "cividis") + 
  labs(
    x = "Animal Species", 
    y = "Weight (g)", 
    title = "Distribution of Weight Across Animal Species"
  ) + 
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        plot.title = element_text(size = rel(1.4)))
```

-   I can modify my plot titles to clearly communicate the data context

```{r}
#| label: dvs-2-ex-3
# Lab 4, Question 8
# Wouldn’t it be nice to add $ signs to the y-axis too???

ggplot(ca_childcare, 
       mapping = aes(x = mhi_2018, 
                     y = mc_infant)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(x = "Median Household Income", 
       y = "Median Weekly Pricing ($)",
       title = "Relationship Between Median Income and Infant Childcare Costs") +
  scale_x_continuous(labels = label_currency(prefix="$")) +
  scale_y_continuous(labels = label_currency(prefix="$")) +
  theme_bw()

```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-ex-4
# Lab 4, Question 7
# CommentL Nice work changing the size of the x-axis text! 
# Can you make this change to other aspects of the plot?

# Revision: I revised my lab to ensure that the y-axis was scaled from 
# 100 to 500 and resized the legend length to match the plots. 
# I also resized the axes and legend text.

plot_ca_childcare|>
  ggplot(mapping = aes(x = study_year,
                       y = median_price,
                       color = region)) +
  geom_point(size = .5)+
  geom_smooth(method = "loess", 
              se = TRUE, 
              linewidth = 0.6,
              alpha = 0.4)+
  scale_color_manual(values = colors)+
  facet_wrap(~ age_group)+
  scale_x_continuous(breaks = seq(2008,2018, by = 2))+
  scale_y_continuous(limits = c(100,500))+
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = NULL,
       color = "California Region")+
  theme_bw()+
  theme(aspect.ratio = 1,
        axis.text.x = element_text(size = 5),
        axis.text.y = element_text(size = 6),
        axis.title.x = element_text(vjust = .4),
        legend.key.size = unit(.35, units="cm"),
        legend.title = element_text(size = 9),
        legend.text = element_text(size = 8))
```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-ex-5
# Lab 4, Question 7
# Comment (from slides): I strongly recommend against nested functions, 
# as they are difficult for people to understand what your code is doing. 
# Having two lines is not less efficient and is more readable.

# Revision: Instead of nesting everything, I separted them so the code is
# easier to read and interpret

plot_ca_childcare <- ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  pivot_longer(cols = starts_with("mc_"),
               names_to = "age_group", 
              values_to = "median_price") |>
  mutate(age_group = fct_recode(age_group,
                              "Infant" = "mc_infant",
                              "Toddler" = "mc_toddler",
                              "Preschool" = "mc_preschool"),
        age_group = fct_relevel(age_group, 
                                "Infant",
                                "Toddler",
                                "Preschool"),
         region = fct_relevel(region,
           "San Francisco Bay Area",
           "Orange County",
           "Los Angeles County",
           "Northern San Joaquin Valley",
           "Central Coast",
           "Inland Empire",
           "Superior California",
           "Southern San Joaquin Valley",
           "San Diego–Imperial",
           "North Coast"))


colors <- colorRampPalette(brewer.pal(7,"Accent"))(10)
     
plot_ca_childcare|>
  ggplot(mapping = aes(x = study_year,
                       y = median_price,
                       color = region)) +
  geom_point(size = .5)+
  geom_smooth(method = "loess", 
              se = TRUE, 
              linewidth = 0.6,
              alpha = 0.4)+
  scale_color_manual(values = colors)+
  facet_wrap(~ age_group)+
  scale_x_continuous(breaks = seq(2008,2018, by = 2))+
  scale_y_continuous(limits = c(100,500))+
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = NULL,
       color = "California Region")+
  theme_bw()+
  theme(aspect.ratio = 1,
        axis.text.x = element_text(size = 5),
        axis.text.y = element_text(size = 6),
        axis.title.x = element_text(vjust = .4),
        legend.key.size = unit(.35, units="cm"),
        legend.title = element_text(size = 9),
        legend.text = element_text(size = 8))

```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors (Example 1)

```{r}
#| label: dvs-3-1-ex-1
# Lab 3 Challenge
# Comment: I would encourage you to push yourself a bit more and try 
# and recreate more of my plot. 
# Can you match my colors? The percentage labels?

# Revision: manually added colors to recreate the plot 

ggplot(data = teacher_evals_compare, 
       mapping = aes(x = sen_level, 
                     fill = SET_level)) +
  geom_bar(stat = "count", 
           position = "fill") +
  scale_y_continuous(labels = scales::percent) +
  scale_fill_manual(values = c("standard" = "#ab834a", "excellent" = "#a880ca")) +
  labs(
    title = "Evaluation of Teachers’ Use of Activities",
    x = "Years of Experience",
    y = "",
    fill = "Evaluation Rating"
  ) +
  theme_bw() +
  theme(legend.position = "top")

```

-   I can use non-standard colors (Example 2)

```{r}
#| label: dvs-3-1-ex-2
# Lab 4, Question 7
# Comment: Can you match my colors??? These are coming from a package and 
# you will need to expand the color palette to get all 10 colors.

# Revision: I used a palette from the color brewer package and expanded it 
# so the number of colors match the number of variables I have in my data

colors <- colorRampPalette(brewer.pal(7, "Accent"))(10)
     
plot_ca_childcare|>
  ggplot(mapping = aes(x = study_year,
                       y = median_price,
                       color = region)) +
  geom_point(size = .5)+
  geom_smooth(method = "loess", 
              se = TRUE, 
              linewidth = 0.6,
              alpha = 0.4)+
  scale_color_manual(values = colors)+
  facet_wrap(~ age_group)+
  scale_x_continuous(breaks = seq(2008,2018, by = 2))+
  scale_y_continuous(limits = c(100,500))+
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = NULL,
       color = "California Region")
```

-   I can use annotations (e.g., `geom_text()`)

```{r}
#| label: dvs-3-2
# Lab 2 Challenge, Analysis Question 2
# Revision: Originally did not have geom_text or currency label
# Added them to provide additional information and create a better visual 

provider_labels <- c("mc" = "center based", "mfcc" = "home based")

ggplot(data = county_data_summary, 
       mapping = aes(x = county_name, 
                     y = mean_cost,
                     fill = county_name)) +
      geom_col() +
      geom_text(aes(label = round(mean_cost), y = mean_cost + 10),
                position = position_dodge(0.9),
                size = 1.7,
                vjust = 0.5,
                accuracy = 1)+
      facet_grid(provider_type ~ age_group,
                labeller = labeller(provider_type = provider_labels)) +
      labs(title = "Average Weekly Childcare Cost by County and Age Group",
           x = "County",
           y = "Mean Weekly Cost ($)",
           fill = "County") +
      theme_bw() +
      theme(axis.text.x = element_blank())+
      scale_y_continuous(labels = label_currency(prefix = "$"))
```

-   I can choose creative geometries (e.g., `geom_segment()`, `geom_ribbon)()`)

```{r}
#| label: dvs-3-3

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize
# Lab 3, Question 10
# Comment: You should only call the filter() function once!

teacher_evals_clean |>
  filter(question_no == 901) |>
  group_by(teacher_id) |>
  summarize(courses_reviewed = n_distinct(course_id),
            average_rating = mean(SET_score_avg, na.rm = TRUE)) |>
  filter(courses_reviewed >= 5,
         average_rating == max(average_rating) | average_rating == min(average_rating))
```

-   Example using `across()`

```{r}
#| label: dvs-4-across
# Lab 3, Question 11
# Modified: Used previous info from the data to incorporate across() 
# and calcualte numerical sum
# This would take the mean across of all variables 
rate_my_prof <- teacher_evals_clean |>
  filter(seniority == 1) |>
  group_by(teacher_id) |>
  summarize(accross(c(avg_course_fail, SET_score_avg, course_id), mean, na.rm=TRUE))
```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1
# Lab 5
potential_suspect <- person |>
  left_join(drivers_license, join_by(license_id == id)) |>
  left_join(income, join_by("ssn")) |>
  left_join(facebook_event_checkin, join_by(id == person_id)
  ) |>
  mutate(attend_date = ymd(date)
  ) |>
  filter(event_name == "SQL Symphony Concert",
         month (attend_date) == 12,
         year(attend_date) == 2017,
         height %in% 65:67,
         hair_color == "red",
         car_make == "Tesla",
         car_model == "Model S") |>
  distinct(name, .keep_all = TRUE) |>
  select(name, id, hair_color, height, gender, car_make, car_model, annual_income, event_name, attend_date) 
glimpse(potential_suspect)
```

-   Example 2

```{r}
#| label: dvs-5-2
# Lab 3, Question 10
# Comment: You should only call the filter() function once!

teacher_evals_clean |>
  filter(question_no == 901) |>
  group_by(teacher_id) |>
  summarize(courses_reviewed = n_distinct(course_id),
            average_rating = mean(SET_score_avg, na.rm = TRUE)) |>
  filter(courses_reviewed >= 5,
         average_rating == max(average_rating) | average_rating == min(average_rating))
```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   I can modify my column names to clearly communicate the data context

```{r}
#| label: dvs-6-ex-1
# Lab 4, Question 5
# Comments: I would recommend using the %in% operator instead of the or!
# Notice that your table still has a grouping variable! 
# Because you grouped by **two** variables, your first group was not dropped!
# Can you give your column names better titles, 
# so the reader knows what "2008" and "2018" represent? 
# What are the values stored in these columns?

#Revision: added an income_ prefix to add data context

ca_childcare |> 
  filter(study_year %in% c(2008,2018)) |>
  group_by(region, study_year) |>
  summarize(median_household_income = median(mhi_2018), .groups = "drop")  |> 
  pivot_wider(names_from = study_year, 
              values_from = median_household_income,
              names_prefix = "income_")|>
  arrange(desc(2018))
```

-   I can modify the text in my table to be more readable (e.g., bold face for column headers)

```{r}
#| label: dvs-6-ex-2
```

-   I can arrange my table to have an intuitive ordering

```{r}
#| label: dvs-6-ex-3
# Lab 4, Question 5
# Comments: I would recommend using the %in% operator instead of the or!
# Notice that your table still has a grouping variable! 
# Because you grouped by **two** variables, your first group was not dropped!
# Can you give your column names better titles, 
# so the reader knows what "2008" and "2018" represent? 
# What are the values stored in these columns?

#Revision: added an income_ prefix to add data context

ca_childcare |> 
  filter(study_year %in% c(2008,2018)) |>
  group_by(region, study_year) |>
  summarize(median_household_income = median(mhi_2018), .groups = "drop")  |> 
  pivot_wider(names_from = study_year, 
              values_from = median_household_income,
              names_prefix = "income_")|>
  arrange(desc(2018))
```

**DVS-7: I show creativity in my tables.**

-   I can use non-default colors

```{r}
#| label: dvs-7-ex-1

```

-   I can modify the layout of my table to be more readable (e.g., `pivot_longer()` or `pivot_wider()`)

```{r}
#| label: dvs-7-ex-2

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call
# Lab 3, Question 5
# Revision: Since as.character is applied to two different columns, 
# I combined them into mutate() and used the across() function so 
# they're all in one line of code, making it look neater

teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  filter(no_participants > 10) |>
  mutate(across(c(teacher_id, course_id), as.character)) |>
  select(course_id, teacher_id, question_no, no_participants, resp_share, SET_score_avg, percent_failed_cur, academic_degree, seniority, sex)

```

-   using `across()`

```{r}
#| label: pe-1-across
# Lab 3, Question 5
# Revision: Since as.character is applied to two different columns, 
# I combined them into mutate() and used the across() function so 
# they're all in one line of code, making it look neater

teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  filter(no_participants > 10) |>
  mutate(across(c(teacher_id, course_id), as.character)) |>
  select(course_id, teacher_id, question_no, no_participants, resp_share, SET_score_avg, percent_failed_cur, academic_degree, seniority, sex)

```

-   using functions from the `map()` family

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1: Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Example 2: Function that operates on data frames

```{r}
#| label: pe-2-2

```

-   Example 3: Function that operates on vectors *or* data frames

```{r}
#| label: pe-2-3

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   using `across()`

```{r}
#| label: pe-3-across

```

-   using a `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   using a `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2

```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1

```

-   Example 2

```{r}
#| label: dsm-2-2

```

-   Example 3

```{r}
#| label: dsm-2-3

```

## Revising My Thinking

Throughout the course, I've revised my thinking in different ways. For example, I struggled with my YAML set up (resulting in "incomplete" submissions), but I now understand what was going on and how it's impacted the visual aspect of my documents. I've also made sure to be more mindful about my code formatting (e.g. "stay consistent and always surround your = signs with blankspaces") so the code flows better and is easier to read. In my portfolio, I've noted some changes I made based on the feedback and suggestions, whether they were marked "growing" or "success" in the lab rubric. I also made sure to comment on any additions or edits I made to my previous code in order to fit some of the criteria.

## Extending My Thinking

To extend my thinking, I almost always take what I learned from programming activities or feedback from previous labs and apply those to my future assignments. In fact, in one of my other classes this quarter, I've been using what I learned about tidy code and quarto documents in my lab work. This helps me share R code more effectively with my peers and keep things organized. I've also revised most of my lab assignments in order to correct any "growing" comments I received, which helps me figure out what I've done wrong and how to improve my code for the next lab assignment. Throughout the course, I've used online resources, like Google, ChatGPT, and YouTube videos to get a better understanding how certain R functions work and how they connect to each other. For example, I'll often scroll through Google to find any cheat sheets that consolidate some of the code we've learned in class, and save those to reference later. The Help tab in R studio has also been a great tool because it provides a variety of aliases and examples that I can just click through and determine which function would fit best in my assignment.

## Peer Support & Collaboration

This is a peer review I wrote that I was proud of, which included some positive feedback and some suggestions on how they can improve their code to make it more tidy:

"Hi! I really like the way you formatted your lab. The way you indented your parentheses and included pipes throughout the document made your code look very organized and professional.

One thing I’d note, when loading in the libraries and data, you don’t really need tidyr (as it’s already part of the tidyverse), so I would only include tidyverse and forcats.

Also, for Question 7 (recreating the plot), I think making the font on the x-axis a bit smaller using theme(axis.text.x = element_text(size = \_ )) could help with the overlapping! Overall, you did great :)"

During peer programming activities, I always tried to follow the developer and coder roles. If we were stumped on the code, we would look to our notes, course slides, printed cheat sheets, or raise our hands for guidance. I've also become more comfortable collaborating with my peers and explaining my thought process as a developer. Initially, I was worried about naming the wrong code or making a mistake, but I've learned that if I do make a mistake, my partner (the coder) will type out and run the code, allowing me to see what I did wrong and figure out my next steps can be to improve it. This mindset change has allowed me to feel more confident entering programming activities and excited to work with my peers.
